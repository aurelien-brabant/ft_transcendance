version: '3'

# We are keeping the postgres container separate so that only the nestjs container can reach to it.

networks:
  rproxy:
  backend:

services:

  # reverse proxy

  nginx-rproxy:
    image: nginx:1.21.5-alpine

    networks:
      - rproxy

    volumes:
      - ./rproxy.nginx.conf:/etc/nginx/nginx.conf

    ports:
      - 80:80

  # frontend

  nextjs-front:
    build:
      context: nextjs-front
      dockerfile: Dockerfile.dev

    networks:
      - rproxy

    volumes:
      - ./nextjs-front:/usr/app

    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_FT_CLIENT_ID=6d337c8d60d5c87552bcb2d9a72a26ea8cc4a531808b2a0d1902a91e311f3b4e

    ports:
      - 3000:3000

  # backend

  nestjs-back:
    build:
      context: nestjs-back
      dockerfile: Dockerfile.dev

    networks:
      - rproxy
      - backend

    volumes:
      - ./nestjs-back:/usr/app

    environment:
      - NODE_ENV=development
      - POSTGRES_USER=transcendance
      - POSTGRES_PASSWORD=transcendance
      - POSTGRES_HOST=postgres
      - JWT_SECRET=dummy_secret
      - JWT_LIFETIME=15m
      - FT_CLIENT_ID=6d337c8d60d5c87552bcb2d9a72a26ea8cc4a531808b2a0d1902a91e311f3b4e
      - FT_SECRET=435863e7eba04ceac9f37dda1ae1b0db54b1ca7aff02189e81b9177299b2b8d7

    ports:
      - 6001:3000
  
  postgres:
    image: postgres:14-alpine3.15

    networks:
      - backend

    volumes:
      - postgres-data:/var/lib/postgresql/data

    environment:
      - POSTGRES_USER=transcendance
      - POSTGRES_PASSWORD=transcendance

volumes:
  postgres-data:
